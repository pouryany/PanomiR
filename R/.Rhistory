ls()
tmp <- installed.packages()
installedpkgs.new <- as.vector(tmp[is.na(tmp[,"Priority"]),1])
installedpkgs.new
tmp
rownames(installedpkgs.new)
rownames(tmp)
installed.pkgs <- load("Downloads/packageList.rda")
installed.pkgs
installed.pkgs <- readRDS("Downloads/pckgsList.rds")
installed.pkgs
setdiff(installed.pkgs,tmp)
installed.pkgs
tmp
rownames(tmp)
setdiff(installed.pkgs,rownames(tmp))
setdiff(installed.pkgs,rownames(tmp))
rownames(tmp)
installed.pkgs
installed.pkgs
install.packages(installed.pkgs)
require(cowplot)
A <- require(cowplot)
A == T
A == F
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
for (i in installed.pkgs){}
for (i in installed.pkgs){
if(!require(i))
BiocManager::install(i)
}
improved_PCxN_PathwayMirSets <- readRDS("~/Desktop/results_pcxn/improved_PCxN_PathwayMirSets.RDS")
res <- improved_PCxN_PathwayMirSets
length(grep("mir",res$Pathway.A))
res <- res[res$p.Adjust < 0.25,]
res <- res[abs(res$PathCor) > 0.3,]
ind <- grep("mir",res$Pathway.A)
res <- res[ind,]
hist(res$Overlap.Coefficient,breaks = 200)
head(res[which(res$PathCor <0),])
library(igraph)
net <- res[,c(1,2)]
net <- as.matrix(net)
net <- graph_from_edgelist(net)
improved_PCxN_PathwayMirSets <- readRDS("~/Desktop/results_pcxn/improved_PCxN_PathwayMirSets.RDS")
res <- improved_PCxN_PathwayMirSets
length(grep("mir",res$Pathway.A))
res <- res[res$p.Adjust < 0.25,]
res <- res[abs(res$PathCor) > 0.3,]
ind <- grep("mir",res$Pathway.A)
res <- res[ind,]
hist(res$Overlap.Coefficient,breaks = 200)
head(res[which(res$PathCor <0),])
V(net)$type <- bipartite.mapping(net)$type
rm(list = ls())
improved_PCxN_PathwayMirSets <- readRDS("~/Desktop/results_pcxn/improved_PCxN_PathwayMirSets.RDS")
res <- improved_PCxN_PathwayMirSets
length(grep("mir",res$Pathway.A))
res <- res[res$p.Adjust < 0.25,]
res <- res[abs(res$PathCor) > 0.3,]
ind <- grep("mir",res$Pathway.A)
res <- res[ind,]
hist(res$Overlap.Coefficient,breaks = 200)
head(res[which(res$PathCor <0),])
library(igraph)
net <- res[,c(1,2)]
net <- as.matrix(net)
net <- graph_from_edgelist(net)
V(net)$type <- bipartite.mapping(net)$type
library(GGally)
library(sna)
library(network)
net <- as.network(net)
net <- res[,c(1,2)]
net <- as.matrix(net)
ggnet2(net, node.size = 0.1)
ggnet2(net, node.size = 0.1,edge.size = 0.1)
bipartite.mapping(net)$type
library(igraph)
net <- res[,c(1,2)]
net <- as.matrix(net)
net <- graph_from_edgelist(net)
bipartite.mapping(net)$type
library(igraph)
net <- res[,c(1,2)]
net <- as.matrix(net)
net <- graph_from_edgelist(net)
V(net)$type <- bipartite.mapping(net)$type
component_distribution(net)
componets(net)
igraph::componets(net)
library(igraph)
componets(net)
componets(net)
setting <- tidyr::expand_grid(summary.method = c("x", "x2"),
summary.Top50  = c(TRUE, FALSE),
comparison     = c("ADvsNormal", "ADvsResilient"),
fdr.paths      = c(0.1,0.05,0.01,0.005,0.0001),
cor.thresh     = c(0.5,0.316,0.1))
setting
t.test(c(2,3,4), c(1000,1004,1008))
t.test(c(2,3,4), c(10000,10004,10008))
t.test(c(2,3,4), c(90``,903,904))
t.test(c(2,3,4), c(901,903,904))
library(SummarizedExperiment)
showMethods(getListElement)
remove.packages("SummarizedExperiment")
install.packages("https://www.bioconductor.org/packages/3.11/bioc/src/contrib/Archive/SummarizedExperiment/SummarizedExperiment_1.17.5.tar.gz", repos = NULL)
install.packages("https://bioconductor.org/packages/3.11/bioc/src/contrib/Archive/S4Vectors/S4Vectors_0.25.15.tar.gz", repos = NULL)
BiocManager::install("Biogenerics")
BiocManager::install("BioGenerics")
BiocManager::install("BiocGenerics")
install.packages("https://bioconductor.org/packages/release/bioc/src/contrib/BiocGenerics_0.34.0.tar.gz", repos = NULL )
install.packages("https://bioconductor.org/packages/3.11/bioc/src/contrib/Archive/S4Vectors/S4Vectors_0.25.15.tar.gz", repos = NULL)
install.packages("https://www.bioconductor.org/packages/3.11/bioc/src/contrib/Archive/SummarizedExperiment/SummarizedExperiment_1.17.5.tar.gz", repos = NULL)
install.packages("https://bioconductor.org/packages/release/bioc/src/contrib/IRanges_2.22.1.tar.gz", repos = NULL)
install.packages("https://www.bioconductor.org/packages/3.11/bioc/src/contrib/Archive/SummarizedExperiment/SummarizedExperiment_1.17.5.tar.gz", repos = NULL)
install.packages("https://bioconductor.org/packages/release/bioc/src/contrib/GenomicRanges_1.40.0.tar.gz", repos = NULL)
update.packages(ask = FALSE)
old.packages()
library(DEXSeq)
install.packages("SummarizedExperiment")
BiocManager::install("SummarizedExperiment")
m1 <- matrix(runif(24), ncol=3)
m2 <- matrix(runif(24), ncol=3)
a <- Assays(SimpleList(m1, m2))
a
as(a, "SimpleList")
length(a)
getListElement(a, 2)
dim(a)
b <- a[-4, 2]
b
length(b)
getListElement(b, 2)
dim(b)
names(a)
names(a) <- c("a1", "a2")
names(a)
getListElement(a, "a2")
rbind(a, a)
cbind(a, a)
## ---------------------------------------------------------------------
## COPY-ON-CHANGE CONTRACT
## ---------------------------------------------------------------------
## ShallowSimpleListAssays objects have copy-on-change semantics but not
## AssaysInEnv objects. For example:
ssla <- as(SimpleList(m1, m2), "ShallowSimpleListAssays")
aie <- as(SimpleList(m1, m2), "AssaysInEnv")
## No names on 'ssla' and 'aie':
names(ssla)
names(aie)
ssla2 <- ssla
aie2 <- aie
names(ssla2) <- names(aie2) <- c("A1", "A2")
names(ssla)  # still NULL (as expected)
names(aie)   # changed! (because the names<-,AssaysInEnv method is not
# implemented in a way that respects the copy-on-change
# contract)
installed.packages()
remove.packages("SummarizedExperiment")
Sys.setenv("KMP_DUPLICATE_LIB_OK" = "TRUE")
options(stringsAsFactors = F)
rm(list = ls())
library(Seurat)
Seurat::ReadH5AD()
Seurat::ReadH5AD
??Seurat::ReadH5AD
setwd("~/Desktop/Research/PanomiR/PanomiR_R")
as_tibble
?as_tibble
library(roxygen2)
library(org.Hs.eg.db)
rownames_to_column
DifferentialPathwayAnalysis
?rownames_to_column
?mutate_if
?inner_join
?pull
?ifelse
lancaster
?lancaster
??lancaster
lancaster
mclapply
mclapply()
setwd("~/Desktop/Research/PanomiR/PanomiR_R/R")
rm(list = ls())
source('01-DifferentialPathwayAnalysis.R')
source('02-MappingPathwaysClusters.R')
source('03-miRNAPathwayEnrichment.R')
source('04-miRNAPrioritization.R')
source('05-miRNAPathwayCorrelation.R')
library(ggplot2)
pathways     <- readRDS('../Data/preprocessed/MSigDBPathGeneTab.RDS')
genes.counts <- readRDS('../Data/LIHC_gene.RDS')
covariates <- read.csv('../Data/TCGA-LIHC-COV.csv', row.names = 1)
condition = 'shortLetterCode'
out.dir   = '../test_cases2/LIHC/Output/'
data.dir  = '../test_cases2/LIHC/Data/'
output0 <- DifferentialPathwayAnalysis(genes.counts,
pathways,
covariates,
condition,
adjust.covars='plate')
output0
de.paths  <- de.paths0$DEP
de.paths <- output0$DEP
de.paths
View(de.paths)
pcxn <- readRDS('../Data/GeneSets/improved_PCxN_MSigDB.RDS')
pathway.clusters <- MappingPathwaysClusters(pcxn = pcxn,
de.paths = de.paths[1:300,],
out.dir=out.dir,
subplot = F,
prefix='LIHC_x2_all_top200_',
cor.thresh = 0.1)
func_list <- c("cluster_edge_betweenness",
"cluster_infomap",
"cluster_fast_greedy",
"cluster_louvain")
pathway.clusters <- list()
for(func in func_list){
temp.clusters <- MappingPathwaysClusters(pcxn = pcxn,
de.paths = de.paths[1:300,],
out.dir= out.dir,
subplot = F,
top.paths = 200,
prefix= paste0('top200_',func),
cor.thresh = 0.1,
clust.fn = get(func),
save.csv.name = paste0("Pathways_",
func,
".csv"))
temp.clusters$method     <- func
pathway.clusters[[func]] <- temp.clusters
}
Reduce(rbind,pathway.clusters)
mir.sets        <- readRDS('../Data/preprocessed/NORMALIZED_MIRSETS.rds')
#mir.sets        <- readRDS('../Data/preprocessed/NORMALIZED_MIRSETS.rds')
#mir.sets        <- readRDS('../../Data/preprocessed/NORMALIZED_MIRSETS_TargetScan01.rds')
mir.sets.list    <- list.files("../Data/preprocessed/",
pattern = "TargetScan",
full.names = T)
pathways.sets   <- readRDS('../Data/GeneSets/MSigDB.RDS')
genes.selection <- rownames(genes.counts)
mirna.counts    <- readRDS('../Data/TCGA-LIHC-miRNAs_residuals.RDS')
# mir.selection   <- rownames(mirna.counts)
mir.selection   <- names(mir.sets)
enriches0 <- readRDS(paste0(data.dir,"LIHCGenesLIHCMirsENRICHMENT_Tarbase.RDS"))
enriches0 <- readRDS(paste0(data.dir,"LIHCGenesLIHCMirsENRICHMENT_Tarbase.RDS"))
func_list <- c("cluster_edge_betweenness",
"cluster_infomap",
"cluster_fast_greedy",
"cluster_louvain")
for(func in func_list){
method <- c("AggInv")
top.clusters <- pathway.clusters[[func]]
enriches0    <- readRDS(paste0(data.dir,"LIHCGenesLIHCMirsENRICHMENT_Tarbase.RDS"))
print(paste0("performing: ", func))
output2 <- PrioritizeMicroRNA(enriches0,
top.clusters,
method,
out.dir=paste0(out.dir,func,
'_Prioritization_',
"Tarbase",
'/'),
data.dir=data.dir,
samp.rate=1000,
prefix=paste0('x2_LIHCGene_',"Tarbase"),
save.jack.knife=F,
save.csv=T,
num.cores = 8,
top.clust=3,
run.jack.knife = F)
}
for(func in func_list){
method       <- c("AggInv")
top.clusters <- pathway.clusters[[func]]
for (mirs in mir.sets.list){
tag       <- tail(unlist(stringr::str_split(mirs,pattern = "_")),1)
mir.sets  <- readRDS(mirs)
name.tag  <- paste0("LIHCGenesLIHCMirsENRICHMENT_",tag)
tag       <- gsub(".rds","",tag)
enriches0 <- readRDS(paste0(data.dir,name.tag))
print(paste0("performing: ", tag))
output2 <- PrioritizeMicroRNA(enriches0,
top.clusters,
method,
out.dir=paste0(out.dir,func,
'_Prioritization_',
tag,
'/'),
data.dir=data.dir,
samp.rate=1000,
prefix=paste0('x2_LIHCGene_',tag),
save.jack.knife=F,
save.csv=T,
num.cores = 8,
top.clust=3,
run.jack.knife = F)
}
}
